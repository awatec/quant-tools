name: Claude Code Automation
on:
issues:
types: [opened, edited]

permissions:
contents: write
pull-requests: write
issues: write

jobs:
process-claude-code:
if: contains(github.event.issue.title, ‘[CLAUDE-CODE]’)
runs-on: ubuntu-latest

```
steps:
  - name: Checkout repository
    uses: actions/checkout@v4
    with:
      token: ${{ secrets.GITHUB_TOKEN }}
      
  - name: Parse Issue Content
    id: parse
    run: |
      # Issue番号取得
      echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
      
      # Issue本文からファイル情報を抽出
      issue_body="${{ github.event.issue.body }}"
      
      # ファイルパスを抽出 (FILE_PATH: で始まる行)
      file_path=$(echo "$issue_body" | grep "^FILE_PATH:" | cut -d' ' -f2-)
      echo "file_path=${file_path}" >> $GITHUB_OUTPUT
      
      # コミットメッセージを抽出
      commit_msg=$(echo "$issue_body" | grep "^COMMIT_MSG:" | cut -d' ' -f2- || echo "Claude auto-implementation")
      echo "commit_msg=${commit_msg}" >> $GITHUB_OUTPUT
      
      # コード内容を抽出 (```の間)
      echo "Extracting code content..."
      
  - name: Extract Code Content
    run: |
      # Issue本文からコードブロックを抽出
      issue_body="${{ github.event.issue.body }}"
      
      # ```で囲まれた部分を抽出
      echo "$issue_body" | sed -n '/```/,/```/p' | sed '1d;$d' > code_content.tmp
      
      # ファイルが空でないことを確認
      if [ -s code_content.tmp ]; then
        echo "Code content extracted successfully"
        head -5 code_content.tmp
      else
        echo "No code content found"
        exit 1
      fi
      
  - name: Create/Update File
    run: |
      file_path="${{ steps.parse.outputs.file_path }}"
      
      if [ -z "$file_path" ]; then
        echo "FILE_PATH not specified in issue"
        exit 1
      fi
      
      # ディレクトリ作成
      mkdir -p $(dirname "$file_path")
      
      # ファイル作成
      cp code_content.tmp "$file_path"
      
      echo "Created file: $file_path"
      
  - name: Run Tests (if applicable)
    run: |
      # Pythonファイルの場合、基本チェック
      file_path="${{ steps.parse.outputs.file_path }}"
      
      if [[ "$file_path" == *.py ]]; then
        echo "Checking Python syntax..."
        python -m py_compile "$file_path" || echo "Syntax check failed"
      fi
      
  - name: Create Pull Request
    uses: peter-evans/create-pull-request@v5
    with:
      token: ${{ secrets.GITHUB_TOKEN }}
      commit-message: "${{ steps.parse.outputs.commit_msg }}"
      title: "🤖 Claude Auto: ${{ github.event.issue.title }}"
      body: |
        ## Claude自動実装
        
        **元Issue**: #${{ steps.parse.outputs.issue_number }}
        **ファイル**: `${{ steps.parse.outputs.file_path }}`
        
        ### 変更内容
        - Claudeが生成したコードを自動実装
        
        ### 次のステップ  
        1. ✅ GitHub Actionsテスト結果確認
        2. ✅ コードレビュー（必要に応じて）
        3. ✅ Merge（問題なければ）
        
        ---
        *This PR was automatically created by Claude automation system*
      branch: claude-auto-${{ steps.parse.outputs.issue_number }}
      delete-branch: true
      
  - name: Comment on Issue
    uses: actions/github-script@v6
    with:
      script: |
        github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: '🚀 **自動PR作成完了！**\n\nPull Requestを作成しました。GitHub Actionsでテストを実行中です...\n\n次のステップ: PR確認→承認→Merge'
        });
```
