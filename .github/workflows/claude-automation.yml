name: Claude Code Automation

on:
  issues:
    types: [opened, edited, labeled]   # ラベル運用にも対応

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-claude-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- まずバリデーションだけ実行（ここで止めても Job は成功扱い） ---
      - name: Validate trigger & extract metadata
        id: validate
        run: |
          title="${{ github.event.issue.title }}"
          body="${{ github.event.issue.body }}"
          labels="${{ join(github.event.issue.labels.*.name, ',') }}"
          echo "::group::Raw inputs"
          echo "title=$title"
          echo "labels=$labels"
          echo "::endgroup::"

          ready="true"

          # ① タイトルに [CLAUDE-CODE] を要求
          echo "$title" | grep -q "\[CLAUDE-CODE\]" || ready="false"

          # ② FILE_PATH 行を抽出
          file_path=$(printf "%s\n" "$body" | grep -E "^FILE_PATH:" | cut -d' ' -f2-)
          [ -n "$file_path" ] || ready="false"

          # ③ ```python または ``` のコードブロック検出
          printf "%s\n" "$body" | awk 'BEGIN{s=0} /^```[Pp]ython/{s=1;next} /^```/{if(s){s=0;print "END"};next} {if(s)print}' > code_content.tmp
          if [ ! -s code_content.tmp ]; then
            printf "%s\n" "$body" | awk 'BEGIN{s=0} /^```/{s=1-s;next} {if(s)print}' > code_content.tmp
          fi
          [ -s code_content.tmp ] || ready="false"

          # ④ ラベル運用にしたい場合は次行を外す（labels に 'claude-code' 必須）
          # echo "$labels" | grep -qi 'claude-code' || ready="false"

          # commit メッセージ
          commit_msg=$(printf "%s\n" "$body" | grep -E "^COMMIT_MSG:" | cut -d' ' -f2-)
          [ -n "$commit_msg" ] || commit_msg="Claude auto-implementation"

          echo "ready=$ready" >> "$GITHUB_OUTPUT"
          echo "file_path=$file_path" >> "$GITHUB_OUTPUT"
          echo "commit_msg=$commit_msg" >> "$GITHUB_OUTPUT"

          if [ "$ready" != "true" ]; then
            echo "Not ready. Conditions not met. Job will exit successfully without actions."
          fi

      # 以降は ready のときだけ実行
      - name: Create file
        if: steps.validate.outputs.ready == 'true'
        run: |
          file_path="${{ steps.validate.outputs.file_path }}"
          mkdir -p "$(dirname "$file_path")"
          cp code_content.tmp "$file_path"
          echo "Created: $file_path"
          head -5 "$file_path" || true

      - name: Python syntax check (optional)
        if: steps.validate.outputs.ready == 'true'
        run: |
          fp="${{ steps.validate.outputs.file_path }}"
          [[ "$fp" == *.py ]] && python3 -m py_compile "$fp" && echo "Syntax OK" || true

      - name: Create Pull Request
        if: steps.validate.outputs.ready == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Claude Auto: ${{ steps.validate.outputs.file_path }}"
          body: |
            Auto-generated by Claude
            File: `${{ steps.validate.outputs.file_path }}`
            Issue: #${{ github.event.issue.number }}
          branch: claude-auto-${{ github.event.issue.number }}
          commit-message: "${{ steps.validate.outputs.commit_msg }}"

      - name: Comment success
        if: steps.validate.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Claude automation: PR created successfully!'
            });
