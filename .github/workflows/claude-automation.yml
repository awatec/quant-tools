name: Claude Code Automation

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-claude-code:
    # タイトルに [CLAUDE-CODE] を含む issue のときだけ実行
    if: contains(github.event.issue.title, '[CLAUDE-CODE]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse Issue Content
        id: parse
        run: |
          echo "issue_number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          issue_body="${{ github.event.issue.body }}"
          file_path=$(echo "$issue_body" | grep "^FILE_PATH:" | cut -d' ' -f2-)
          echo "file_path=${file_path}" >> "$GITHUB_OUTPUT"
          commit_msg=$(echo "$issue_body" | grep "^COMMIT_MSG:" | cut -d' ' -f2-)
          [ -z "$commit_msg" ] && commit_msg="Claude auto-implementation"
          echo "commit_msg=${commit_msg}" >> "$GITHUB_OUTPUT"

      - name: Extract Code Content
        run: |
          issue_body="${{ github.event.issue.body }}"
          # ```python ... ``` を最優先
          echo "$issue_body" | awk '
            BEGIN{inblock=0}
            /^```[Pp]ython/{inblock=1; next}
            /^```/{ if(inblock){inblock=0; exit} }
            { if(inblock) print }
          ' > code_content.tmp

          # 見つからなければ任意の ``` ... ```
          if [ ! -s code_content.tmp ]; then
            echo "$issue_body" | awk '
              BEGIN{inblock=0}
              /^```/{inblock=!inblock; next}
              { if(inblock) print }
            ' > code_content.tmp
          fi

          if [ -s code_content.tmp ]; then
            echo "Code extracted successfully"
            head -5 code_content.tmp
          else
            echo "ERROR: No code found"
            exit 1
          fi

      - name: Create File
        run: |
          file_path="${{ steps.parse.outputs.file_path }}"
          if [ -z "$file_path" ]; then
            echo "ERROR: FILE_PATH missing"
            exit 1
          fi
          mkdir -p "$(dirname "$file_path")"
          cp code_content.tmp "$file_path"
          echo "File created: $file_path"

      - name: Python Check
        run: |
          file_path="${{ steps.parse.outputs.file_path }}"
          if [[ "$file_path" == *.py ]]; then
            python3 -m py_compile "$file_path" && echo "Syntax OK"
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Claude Auto: ${{ steps.parse.outputs.file_path }}"
          body: |
            Auto-generated by Claude
            File: `${{ steps.parse.outputs.file_path }}`
            Issue: #${{ steps.parse.outputs.issue_number }}
          branch: claude-auto-${{ steps.parse.outputs.issue_number }}
          commit-message: "${{ steps.parse.outputs.commit_msg }}"

      - name: Comment Success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Claude automation: PR created successfully!'
            });
