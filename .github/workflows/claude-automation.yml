name: Claude Code Automation

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-claude-code:
    # タイトル [CLAUDE-CODE] か、ラベル claude-code のどちらかで起動
    if: contains(github.event.issue.title, '[CLAUDE-CODE]') || contains(join(github.event.issue.labels.*.name, ','), 'claude-code')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 本文を JS で安全に解析（FILE_PATH / COMMIT_MSG / コード抽出）
      - name: Parse issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue?.body || "";
            // FILE_PATH
            const mPath = body.match(/^FILE_PATH:\s*(.+)$/m);
            const file_path = (mPath?.[1] || "").trim();
            // COMMIT_MSG
            const mMsg = body.match(/^COMMIT_MSG:\s*(.+)$/m);
            const commit_msg = (mMsg?.[1] || "Claude auto-implementation").trim();

            // ```python ... ``` 優先、なければ最初の ``` ... ```
            let code = "";
            const pyBlock = body.match(/```python\s*([\s\S]*?)```/i);
            if (pyBlock) {
              code = pyBlock[1];
            } else {
              const anyBlock = body.match(/```+\s*([\s\S]*?)```+/);
              if (anyBlock) code = anyBlock[1];
            }
            // 余計な BOM/CR を整理
            code = code.replace(/^\uFEFF/, "");

            const ready = !!(file_path && code);

            core.info(`ready=${ready} file_path="${file_path}" commit_msg="${commit_msg}"`);
            core.setOutput("ready", String(ready));
            core.setOutput("file_path", file_path);
            core.setOutput("commit_msg", commit_msg);
            core.setOutput("code_b64", Buffer.from(code, "utf8").toString("base64"));

            if (!ready) {
              core.notice("Required fields missing. Need [CLAUDE-CODE] title/label, FILE_PATH line, and a fenced code block.");
            }

      - name: Write file from code
        if: steps.parse.outputs.ready == 'true'
        run: |
          FILE_PATH="${{ steps.parse.outputs.file_path }}"
          mkdir -p "$(dirname "$FILE_PATH")"
          echo "${{ steps.parse.outputs.code_b64 }}" | base64 -d > "$FILE_PATH"
          echo "Wrote $FILE_PATH"
          head -5 "$FILE_PATH" || true

      - name: Python syntax check (optional)
        if: steps.parse.outputs.ready == 'true'
        run: |
          FILE_PATH="${{ steps.parse.outputs.file_path }}"
          [[ "$FILE_PATH" == *.py ]] && python3 -m py_compile "$FILE_PATH" && echo "Syntax OK" || true

      - name: Create Pull Request
        if: steps.parse.outputs.ready == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Claude Auto: ${{ steps.parse.outputs.file_path }}"
          body: |
            Auto-generated by Claude
            File: `${{ steps.parse.outputs.file_path }}`
            Issue: #${{ github.event.issue.number }}
          branch: claude-auto-${{ github.event.issue.number }}
          commit-message: "${{ steps.parse.outputs.commit_msg }}"

      - name: Comment success
        if: steps.parse.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "Claude automation: PR created successfully! ✅"
            });
